-- Hoogle documentation, generated by Haddock
-- See Hoogle, http://www.haskell.org/hoogle/


-- | Just-add-water benchmarks
--   
--   Please see README.md
@package halytics
@version 0.1.0.0

module Halytics.Time
timeSpecAsMicroSecs :: TimeSpec -> Double
timeIO :: IO a -> IO (a, Double)

module Halytics.Monitor.Lens.TH
plop :: DecsQ
doNow :: Int -> Int -> Dec
t :: Int -> Type
t' :: Int -> Type
field :: Int -> Type
_n :: Int -> Int -> Dec
sub :: Int -> Int -> Exp
insert :: Int -> Int -> Exp
funct :: Int -> Exp
fmap_ :: Exp

module Halytics.Monitor.Tuple
class Collect t where type family S t notify (Go s) x = Go $ collect (Proxy :: Proxy t) s x notifyMany = foldl' notify collectMany p = foldl' (collect p)
collect :: Collect t => Proxy t -> S t -> Double -> S t
collectMany :: Collect t => Proxy t -> S t -> [Double] -> S t
notify :: Collect t => Monitor t -> Double -> Monitor t
notifyMany :: Collect t => Monitor t -> [Double] -> Monitor t
class Generate t
generate :: Generate t => Monitor t
class Default t
initial :: Default t => Proxy t -> S t
class Resultable t r
r :: Resultable t r => Proxy t -> S t -> r
class Initialize t
initialize :: Initialize t => t -> S t
data Single a :: *
Single :: S t -> Single t
data Monitor :: * -> *
Go :: S t -> Monitor t
monitorWith :: (Initialize t, Collect t) => t -> Monitor t
resultWithProxy :: (Resultable t r) => Proxy t -> Monitor t -> r
result :: (Resultable t r) => Monitor t -> r

-- | A dummy <tt>Monitor</tt> for convenience. TODO: Should this go with
--   the lenses?
data Placeholder

-- | Type family that applies the RHS (<tt>* -&gt; *</tt>) to the LHS
--   (<tt>*</tt>) to produce a type. It is merely syntactic sugar.
--   examples: <tt> Int |^ Monad ≡ Monad Int Max |^ (Last 10) ≡ Last 10 Max
--   </tt>
fromPlaceholder :: (Initialize t, Collect t) => Monitor Placeholder -> t -> Monitor t
instance (Halytics.Monitor.Tuple.Default t, Halytics.Monitor.Tuple.Collect t) => Halytics.Monitor.Tuple.Generate t
instance (Halytics.Monitor.Tuple.Default a, Halytics.Monitor.Tuple.Default b) => Halytics.Monitor.Tuple.Default (a, b)
instance (Halytics.Monitor.Tuple.Default a, Halytics.Monitor.Tuple.Default b, Halytics.Monitor.Tuple.Default c) => Halytics.Monitor.Tuple.Default (a, b, c)
instance (Halytics.Monitor.Tuple.Default a, Halytics.Monitor.Tuple.Default b, Halytics.Monitor.Tuple.Default c, Halytics.Monitor.Tuple.Default d) => Halytics.Monitor.Tuple.Default (a, b, c, d)
instance (Halytics.Monitor.Tuple.Default a, Halytics.Monitor.Tuple.Default b, Halytics.Monitor.Tuple.Default c, Halytics.Monitor.Tuple.Default d, Halytics.Monitor.Tuple.Default e) => Halytics.Monitor.Tuple.Default (a, b, c, d, e)
instance (Halytics.Monitor.Tuple.Default a, Halytics.Monitor.Tuple.Default b, Halytics.Monitor.Tuple.Default c, Halytics.Monitor.Tuple.Default d, Halytics.Monitor.Tuple.Default e, Halytics.Monitor.Tuple.Default f) => Halytics.Monitor.Tuple.Default (a, b, c, d, e, f)
instance (Halytics.Monitor.Tuple.Collect a, Halytics.Monitor.Tuple.Collect b) => Halytics.Monitor.Tuple.Collect (a, b)
instance (Halytics.Monitor.Tuple.Collect a, Halytics.Monitor.Tuple.Collect b, Halytics.Monitor.Tuple.Collect c) => Halytics.Monitor.Tuple.Collect (a, b, c)
instance (Halytics.Monitor.Tuple.Collect a, Halytics.Monitor.Tuple.Collect b, Halytics.Monitor.Tuple.Collect c, Halytics.Monitor.Tuple.Collect d) => Halytics.Monitor.Tuple.Collect (a, b, c, d)
instance (Halytics.Monitor.Tuple.Collect a, Halytics.Monitor.Tuple.Collect b, Halytics.Monitor.Tuple.Collect c, Halytics.Monitor.Tuple.Collect d, Halytics.Monitor.Tuple.Collect e) => Halytics.Monitor.Tuple.Collect (a, b, c, d, e)
instance (Halytics.Monitor.Tuple.Collect a, Halytics.Monitor.Tuple.Collect b, Halytics.Monitor.Tuple.Collect c, Halytics.Monitor.Tuple.Collect d, Halytics.Monitor.Tuple.Collect e, Halytics.Monitor.Tuple.Collect f) => Halytics.Monitor.Tuple.Collect (a, b, c, d, e, f)
instance Halytics.Monitor.Tuple.Collect Halytics.Monitor.Tuple.Placeholder
instance Halytics.Monitor.Tuple.Default Halytics.Monitor.Tuple.Placeholder

module Halytics.Metric.Statistics
newtype StoredStats a
StoredStats :: a -> StoredStats a
class FromStats a r | a -> r
func :: FromStats a r => Proxy a -> Vector Double -> r
data Mean'
type Mean = StoredStats Mean'
data HarmonicMean'
type HarmonicMean = StoredStats HarmonicMean'
data GeometricMean'
type GeometricMean = StoredStats GeometricMean'
data CentralMoment' :: Nat -> *
type CentralMoment k = StoredStats (CentralMoment' k)
data CentralMoments' :: Nat -> Nat -> *
type CentralMoments k j = StoredStats (CentralMoments' k j)
data Skewness'
type Skewness = StoredStats Skewness'
data Kurtosis'
type Kurtosis = StoredStats Kurtosis'
data Variance'
type Variance = StoredStats Variance'
data VarianceUnbiased'
type VarianceUnbiased = StoredStats VarianceUnbiased'
data MeanVariance'
type MeanVariance = StoredStats MeanVariance'
data MeanVarianceUnb'
type MeanVarianceUnb = StoredStats MeanVarianceUnb'
data StdDev'
type StdDev = StoredStats StdDev'
data FastVariance'
type FastVariance = StoredStats FastVariance'
data FastVarianceUnbiased'
type FastVarianceUnbiased = StoredStats FastVarianceUnbiased'
data FastStdDev'
type FastStdDev = StoredStats FastStdDev'
type Quantile k q = WeightedAvg k q
type Percentile k = Quantile k 100
type Median = Percentile 50
data WeightedAvg' :: Nat -> Nat -> *
type WeightedAvg k q = StoredStats (WeightedAvg' k q)
instance Halytics.Monitor.Tuple.Collect (Halytics.Metric.Statistics.StoredStats a)
instance Halytics.Monitor.Tuple.Default (Halytics.Metric.Statistics.StoredStats a)
instance (Halytics.Monitor.Tuple.Collect (Halytics.Metric.Statistics.StoredStats a), Halytics.Metric.Statistics.FromStats a r) => Halytics.Monitor.Tuple.Resultable (Halytics.Metric.Statistics.StoredStats a) r
instance Halytics.Metric.Statistics.FromStats Halytics.Metric.Statistics.Mean' GHC.Types.Double
instance Halytics.Monitor.Tuple.Resultable Halytics.Metric.Statistics.Mean GHC.Base.String
instance Halytics.Metric.Statistics.FromStats Halytics.Metric.Statistics.HarmonicMean' GHC.Types.Double
instance Halytics.Monitor.Tuple.Resultable Halytics.Metric.Statistics.HarmonicMean GHC.Base.String
instance Halytics.Metric.Statistics.FromStats Halytics.Metric.Statistics.GeometricMean' GHC.Types.Double
instance Halytics.Monitor.Tuple.Resultable Halytics.Metric.Statistics.GeometricMean GHC.Base.String
instance GHC.TypeLits.KnownNat k => Halytics.Metric.Statistics.FromStats (Halytics.Metric.Statistics.CentralMoment' k) GHC.Types.Double
instance GHC.TypeLits.KnownNat k => Halytics.Monitor.Tuple.Resultable (Halytics.Metric.Statistics.CentralMoment k) GHC.Base.String
instance (GHC.TypeLits.KnownNat k, GHC.TypeLits.KnownNat j) => Halytics.Metric.Statistics.FromStats (Halytics.Metric.Statistics.CentralMoments' k j) (GHC.Types.Double, GHC.Types.Double)
instance (GHC.TypeLits.KnownNat k, GHC.TypeLits.KnownNat j) => Halytics.Monitor.Tuple.Resultable (Halytics.Metric.Statistics.CentralMoments k j) (GHC.Base.String, GHC.Base.String)
instance (GHC.TypeLits.KnownNat k, GHC.TypeLits.KnownNat j) => Halytics.Monitor.Tuple.Resultable (Halytics.Metric.Statistics.CentralMoments k j) GHC.Base.String
instance Halytics.Metric.Statistics.FromStats Halytics.Metric.Statistics.Skewness' GHC.Types.Double
instance Halytics.Monitor.Tuple.Resultable Halytics.Metric.Statistics.Skewness GHC.Base.String
instance Halytics.Metric.Statistics.FromStats Halytics.Metric.Statistics.Kurtosis' GHC.Types.Double
instance Halytics.Monitor.Tuple.Resultable Halytics.Metric.Statistics.Kurtosis GHC.Base.String
instance Halytics.Metric.Statistics.FromStats Halytics.Metric.Statistics.Variance' GHC.Types.Double
instance Halytics.Monitor.Tuple.Resultable Halytics.Metric.Statistics.Variance GHC.Base.String
instance Halytics.Metric.Statistics.FromStats Halytics.Metric.Statistics.VarianceUnbiased' GHC.Types.Double
instance Halytics.Monitor.Tuple.Resultable Halytics.Metric.Statistics.VarianceUnbiased GHC.Base.String
instance Halytics.Metric.Statistics.FromStats Halytics.Metric.Statistics.MeanVariance' (GHC.Types.Double, GHC.Types.Double)
instance Halytics.Monitor.Tuple.Resultable Halytics.Metric.Statistics.MeanVariance (GHC.Base.String, GHC.Base.String)
instance Halytics.Monitor.Tuple.Resultable Halytics.Metric.Statistics.MeanVariance GHC.Base.String
instance Halytics.Metric.Statistics.FromStats Halytics.Metric.Statistics.MeanVarianceUnb' (GHC.Types.Double, GHC.Types.Double)
instance Halytics.Monitor.Tuple.Resultable Halytics.Metric.Statistics.MeanVarianceUnb (GHC.Base.String, GHC.Base.String)
instance Halytics.Monitor.Tuple.Resultable Halytics.Metric.Statistics.MeanVarianceUnb GHC.Base.String
instance Halytics.Metric.Statistics.FromStats Halytics.Metric.Statistics.StdDev' GHC.Types.Double
instance Halytics.Monitor.Tuple.Resultable Halytics.Metric.Statistics.StdDev GHC.Base.String
instance Halytics.Metric.Statistics.FromStats Halytics.Metric.Statistics.FastVariance' GHC.Types.Double
instance Halytics.Monitor.Tuple.Resultable Halytics.Metric.Statistics.FastVariance GHC.Base.String
instance Halytics.Metric.Statistics.FromStats Halytics.Metric.Statistics.FastVarianceUnbiased' GHC.Types.Double
instance Halytics.Monitor.Tuple.Resultable Halytics.Metric.Statistics.FastVarianceUnbiased GHC.Base.String
instance Halytics.Metric.Statistics.FromStats Halytics.Metric.Statistics.FastStdDev' GHC.Types.Double
instance Halytics.Monitor.Tuple.Resultable Halytics.Metric.Statistics.FastStdDev GHC.Base.String
instance (GHC.TypeLits.KnownNat k, GHC.TypeLits.KnownNat q) => Halytics.Metric.Statistics.FromStats (Halytics.Metric.Statistics.WeightedAvg' k q) (GHC.Base.Maybe GHC.Types.Double)
instance (GHC.TypeLits.KnownNat k, GHC.TypeLits.KnownNat q) => Halytics.Monitor.Tuple.Resultable (Halytics.Metric.Statistics.WeightedAvg k q) GHC.Base.String

module Halytics.Monitor.Lens
(%<~) :: (Collect t', Initialize t') => ASetter s t (Monitor Placeholder) (Monitor t') -> t' -> s -> t
initializeWith :: (Collect t', Initialize t') => ASetter s t (Monitor Placeholder) (Monitor t') -> t' -> s -> t
instance Control.Lens.Tuple.Field1 (Halytics.Monitor.Tuple.Monitor (t1, t2)) (Halytics.Monitor.Tuple.Monitor (t1', t2)) (Halytics.Monitor.Tuple.Monitor t1) (Halytics.Monitor.Tuple.Monitor t1')
instance Control.Lens.Tuple.Field1 (Halytics.Monitor.Tuple.Monitor (t1, t2, t3)) (Halytics.Monitor.Tuple.Monitor (t1', t2, t3)) (Halytics.Monitor.Tuple.Monitor t1) (Halytics.Monitor.Tuple.Monitor t1')
instance Control.Lens.Tuple.Field2 (Halytics.Monitor.Tuple.Monitor (t1, t2)) (Halytics.Monitor.Tuple.Monitor (t1, t2')) (Halytics.Monitor.Tuple.Monitor t2) (Halytics.Monitor.Tuple.Monitor t2')
instance Control.Lens.Tuple.Field2 (Halytics.Monitor.Tuple.Monitor (t1, t2, t3)) (Halytics.Monitor.Tuple.Monitor (t1, t2', t3)) (Halytics.Monitor.Tuple.Monitor t2) (Halytics.Monitor.Tuple.Monitor t2')
instance Control.Lens.Tuple.Field3 (Halytics.Monitor.Tuple.Monitor (t1, t2, t3)) (Halytics.Monitor.Tuple.Monitor (t1, t2, t3')) (Halytics.Monitor.Tuple.Monitor t3) (Halytics.Monitor.Tuple.Monitor t3')

module Halytics.Monitor
class Collect t where type family S t notify (Go s) x = Go $ collect (Proxy :: Proxy t) s x notifyMany = foldl' notify collectMany p = foldl' (collect p)
collect :: Collect t => Proxy t -> S t -> Double -> S t
collectMany :: Collect t => Proxy t -> S t -> [Double] -> S t
notify :: Collect t => Monitor t -> Double -> Monitor t
notifyMany :: Collect t => Monitor t -> [Double] -> Monitor t
class Default t
initial :: Default t => Proxy t -> S t
class Initialize t
initialize :: Initialize t => t -> S t
data Monitor :: * -> *
class Resultable t r
r :: Resultable t r => Proxy t -> S t -> r

-- | Type family that applies the RHS (<tt>* -&gt; *</tt>) to the LHS
--   (<tt>*</tt>) to produce a type. It is merely syntactic sugar.
--   examples: <tt> Int |^ Monad ≡ Monad Int Max |^ (Last 10) ≡ Last 10 Max
--   </tt>
fromPlaceholder :: (Initialize t, Collect t) => Monitor Placeholder -> t -> Monitor t
generate :: Generate t => Monitor t
monitorWith :: (Initialize t, Collect t) => t -> Monitor t
result :: (Resultable t r) => Monitor t -> r
(%<~) :: (Collect t', Initialize t') => ASetter s t (Monitor Placeholder) (Monitor t') -> t' -> s -> t


-- | ...
module Halytics.Metric

-- | <a>All</a> will simply give back all the entries collected. This
--   should mostly be used for testing.
--   
--   <pre>
--   &gt;&gt;&gt; let monitor = generate :: Monitor All
--   
--   &gt;&gt;&gt; result (notifyMany monitor [1.0,2.0,3.0]) :: [Double]
--   [1.0,2.0,3.0]
--   </pre>
--   
--   The following property should hold:
--   
--   <pre>
--   result (notifyMany (generate :: Monitor All) xs) == xs
--   </pre>
data All :: *

-- | <a>Max</a> will result in the largest entry collected so far. If no
--   entry was collected so far, results in <a>Nothing</a>. If any entry
--   was collected, results in <a>Just</a> the maximum.
--   
--   <pre>
--   &gt;&gt;&gt; let monitor = generate :: Monitor Max
--   
--   &gt;&gt;&gt; result (notifyMany monitor [1.0,2.0,3.0]) :: Maybe Double
--   Just 3.0
--   
--   &gt;&gt;&gt; result (notifyMany monitor []) :: Maybe Double
--   Nothing
--   </pre>
--   
--   The following property should hold:
--   
--   <pre>
--   result (notifyMany (generate :: Monitor Max) xs) == maximumMay xs
--   </pre>
data Max

-- | <a>Min</a> will result in the smallest entry collected so far. If no
--   entry was collected so far, results in <a>Nothing</a>. If any entry
--   was collected, results in <a>Just</a> the minimum.
--   
--   <pre>
--   &gt;&gt;&gt; let monitor = generate :: Monitor Min
--   
--   &gt;&gt;&gt; result (notifyMany monitor [1.0,2.0,3.0]) :: Maybe Double
--   Just 1.0
--   
--   &gt;&gt;&gt; result (notifyMany monitor []) :: Maybe Double
--   Nothing
--   </pre>
--   
--   The following property should hold:
--   
--   <pre>
--   result (notifyMany (generate :: Monitor Min) xs) == minimumMay xs
--   </pre>
data Min

-- | <a>Every</a> will feed another metric every <tt>n</tt>th element
--   collected. <a>Every</a> will feed the metric the first, <tt>n+1</tt>
--   th, <tt>2n+1</tt> th, ... collected elements.
--   
--   <pre>
--   &gt;&gt;&gt; let monitor = generate :: Monitor (All |^ Every 2)
--   
--   &gt;&gt;&gt; result (notifyMany monitor [1.0,2.0,3.0,2.0,1.0]) :: [Double]
--   [1.0,3.0,1.0]
--   </pre>
data Every :: Nat -> * -> *

-- | <a>Last</a> will feed another metric the last <tt>n</tt> elements
--   collected.
--   
--   <pre>
--   &gt;&gt;&gt; let monitor = generate :: Monitor (All |^ Last 2)
--   
--   &gt;&gt;&gt; result (notifyMany monitor [1.0,2.0,3.0,2.0,1.0]) :: [Double]
--   [2.0,1.0]
--   </pre>
data Last :: Nat -> * -> *

-- | <a>PeriodOf</a> will feed another metric with chunks of <tt>n</tt>
--   elements. <a>result</a> returns the list of the results (one for each
--   chunk).
--   
--   <pre>
--   &gt;&gt;&gt; let monitor = generate :: Monitor (All |^ PeriodOf 2)
--   
--   &gt;&gt;&gt; result (notifyMany monitor [1.0,2.0,3.0,2.0,1.0]) :: [[Double]]
--   [[1.0,2.0],[3.0,2.0],[1.0]]
--   </pre>
data PeriodOf :: Nat -> * -> *
instance Halytics.Monitor.Tuple.Collect Halytics.Metric.All
instance Halytics.Monitor.Tuple.Default Halytics.Metric.All
instance Halytics.Monitor.Tuple.Resultable Halytics.Metric.All [GHC.Types.Double]
instance Halytics.Monitor.Tuple.Resultable Halytics.Metric.All GHC.Base.String
instance Halytics.Monitor.Tuple.Collect Halytics.Metric.Max
instance Halytics.Monitor.Tuple.Default Halytics.Metric.Max
instance Halytics.Monitor.Tuple.Resultable Halytics.Metric.Max (GHC.Base.Maybe GHC.Types.Double)
instance Halytics.Monitor.Tuple.Resultable Halytics.Metric.Max GHC.Base.String
instance Halytics.Monitor.Tuple.Collect Halytics.Metric.Min
instance Halytics.Monitor.Tuple.Default Halytics.Metric.Min
instance Halytics.Monitor.Tuple.Resultable Halytics.Metric.Min (GHC.Base.Maybe GHC.Types.Double)
instance Halytics.Monitor.Tuple.Resultable Halytics.Metric.Min GHC.Base.String
instance (Halytics.Monitor.Tuple.Collect s, GHC.TypeLits.KnownNat n) => Halytics.Monitor.Tuple.Collect (Halytics.Metric.Every n s)
instance (GHC.TypeLits.KnownNat n, Halytics.Monitor.Tuple.Default s) => Halytics.Monitor.Tuple.Default (Halytics.Metric.Every n s)
instance Halytics.Monitor.Tuple.Resultable t r => Halytics.Monitor.Tuple.Resultable (Halytics.Metric.Every n t) r
instance GHC.TypeLits.KnownNat n => Halytics.Monitor.Tuple.Collect (Halytics.Metric.Last n s)
instance Halytics.Monitor.Tuple.Default (Halytics.Metric.Last n s)
instance (Halytics.Monitor.Tuple.Default t, Halytics.Monitor.Tuple.Collect t, Halytics.Monitor.Tuple.Resultable t r) => Halytics.Monitor.Tuple.Resultable (Halytics.Metric.Last n t) r
instance Halytics.Monitor.Tuple.Collect (Halytics.Metric.PeriodOf n s)
instance Halytics.Monitor.Tuple.Default (Halytics.Metric.PeriodOf n s)
instance (GHC.TypeLits.KnownNat n, Halytics.Monitor.Tuple.Resultable t r, Halytics.Monitor.Tuple.Collect t, Halytics.Monitor.Tuple.Default t) => Halytics.Monitor.Tuple.Resultable (Halytics.Metric.PeriodOf n t) [r]

module Halytics.Tutorial
